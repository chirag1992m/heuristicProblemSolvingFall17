import argparse
import json
import socket
import random
from .random_bot import RandomBot

class ExploreExploitBot(RandomBot):

    DATA_SIZE = 8192

    def __init__(self, name, server_address):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socket.connect(server_address)
        self.__send_json({'name': name})
        self.name = name

        init_status = self.receive_init()
        self.current_round = 0
        print(init_status)
        self.artists_types = init_status['artists_types']
        self.required_count = init_status['required_count']
        self.auction_items = init_status['auction_items']
        self.current_wealth = init_status['init_wealth']
        self.player_count = init_status['player_count']
        self.player_paintings = {}
        self.player_wealth = {}
        self.game_state = None
        self.items_bought = [0 for _ in range(self.artists_types)]

    def get_winning_bid(self, cur_item):
        items_left = 0
        try:
            items_left = self.required_count - self.player_paintings[self.name][cur_item]
        except KeyError:
            items_left = self.required_count
        price = self.current_wealth//items_left
        price += items_left / 2
        return min(price, self.current_wealth - items_left + 1)

    def get_bid(self):
        cur_item = self.auction_items[self.current_round]
        try:
            if self.player_paintings[self.name][cur_item] == self.required_count - 1:
                return self.current_wealth
        except KeyError:
            pass
        try:
            for player in self.player_paintings:
                if self.player_paintings[player][cur_item] == self.required_count -1:
                    # sleep(5)
                    return min(self.player_wealth[player] + 1, self.player_wealth[self.name])
        except KeyError:
            pass
        max_painting = -1
        painting_name = -1
        try:
            for painting in self.player_paintings[self.name]:
                if self.player_paintings[self.name][painting] > max_painting:
                    max_painting = self.player_paintings[self.name][painting]
                    painting_name = painting
        except KeyError:
            painting_name = cur_item
        if painting_name == cur_item:
            random_num = random.randint(1, 10)
            if random_num != 10:
                return self.get_winning_bid(cur_item)
            else:
                return 0
        else:
            random_num = random.randint(1,10)
            if random_num == 1:
                return self.get_winning_bid(cur_item)
            else:
                return 0
        return random.randint(0, self.current_wealth)

    def check_game_status(self):
        if self.game_state['bid_winner'] is not None:
            print('Player {} won {} on this round {} with bid amount {}.'
                  .format(self.game_state['bid_winner'],
                          self.game_state['bid_item'],
                          self.game_state['auction_round'],
                          self.game_state['winning_bid']))
            if self.game_state['bid_winner'] == self.name:
                self.current_wealth -= self.game_state['winning_bid']
                self.items_bought[int(self.game_state['bid_item'][1:])] += 1
            player_name = self.game_state['bid_winner']
            if player_name not in self.player_paintings:
                self.player_paintings[player_name] = {}
            bid_item = self.game_state['bid_item']
            if bid_item not in self.player_paintings[player_name]:
                self.player_paintings[player_name][bid_item] = 0
            self.player_paintings[player_name][bid_item] += 1
            if player_name not in self.player_wealth:
                self.player_wealth[player_name] = 100 - self.game_state['winning_bid']
            else:
                self.player_wealth[player_name] -= self.game_state['winning_bid']
        else:
            print('No bidders in this round {}.'.format(self.game_state['auction_round']))

        print('-------------------------------')

        if self.game_state['finished']:
            print('Game over\n{}\n'.format(self.game_state['reason']))
            return False
        return True

    def play(self):
        self.current_round = 0
        while True:
            bid_amt = self.get_bid()
            self.make_bid(self.auction_items[self.current_round], bid_amt)

            # after sending bid, wait for other player
            self.game_state = self.receive_round()
            if not self.check_game_status():
                break
            self.current_round += 1


if __name__ == "__main__":
    random.seed(42)

    parser = argparse.ArgumentParser()
    parser.add_argument('--host', default='localhost', type=str)
    parser.add_argument('--port', default=9000, type=int)
    parser.add_argument('--name', default='CO2', type=str)
    args = parser.parse_args()

    bot = RandomBot(args.name, (args.host, args.port))
    bot.play()
